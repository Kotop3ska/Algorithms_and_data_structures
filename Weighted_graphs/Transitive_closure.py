"""
–ù–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ –∑–∞–¥–∞–Ω —Å–≤–æ–µ–π –º–∞—Ç—Ä–∏—Ü–µ–π —Å–º–µ–∂–Ω–æ—Å—Ç–∏. 
–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –µ–≥–æ —Ç—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ, —Ç–æ –µ—Å—Ç—å –º–∞—Ç—Ä–∏—Ü—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤ ùëñ-–π —Å—Ç—Ä–æ–∫–µ –∏ ùëó-–º —Å—Ç–æ–ª–±—Ü–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è 1, 
–µ—Å–ª–∏ –æ—Ç –≤–µ—Ä—à–∏–Ω—ã ùëñ –º–æ–∂–Ω–æ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –≤–µ—Ä—à–∏–Ω—ã ùëó, –∏ 0 - –∏–Ω–∞—á–µ.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–∞–Ω–æ —á–∏—Å–ª–æ ùëÅ (1‚â§ùëÅ‚â§100) - —á–∏—Å–ª–æ –≤–µ—Ä—à–∏–Ω –≤ –≥—Ä–∞—Ñ–µ. –î–∞–ª–µ–µ –∑–∞–¥–∞–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏ –≥—Ä–∞—Ñ–∞: 
–≤ ùëÅ —Å—Ç—Ä–æ–∫–∞—Ö –¥–∞–Ω—ã –ø–æ ùëÅ —á–∏—Å–µ–ª 0 –∏–ª–∏ 1 –≤ –∫–∞–∂–¥–æ–π. ùëñ-–µ —á–∏—Å–ª–æ –≤ ùëñ-–π —Å—Ç—Ä–æ–∫–µ –≤—Å–µ–≥–¥–∞ —Ä–∞–≤–Ω–æ 1.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—É —Ç—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º—ã–∫–∞–Ω–∏—è –≥—Ä–∞—Ñ–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç—É –º–∞—Ç—Ä–∏—Ü—ã —Å–º–µ–∂–Ω–æ—Å—Ç–∏.
"""

def floyd_warshall(graph, n):
    matrix = [row[:] for row in graph]

    for k in range(n):
        for i in range(n):
            for j in range(n):
                if matrix[i][k] != 0 and matrix[k][j] != 0:
                    matrix[i][j] = 1
    return matrix


n = int(input())
graph = [[int(i) for i in input().split()] for _ in range(n)]

matrix = floyd_warshall(graph, n)

for row in matrix:
    print(*row)